<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>Learn another day (Записи о React)</title><link>https://al1s.github.io/</link><description></description><atom:link rel="self" href="https://al1s.github.io/ru/categories/react.xml" type="application/rss+xml"></atom:link><language>ru</language><copyright>Contents © 2018 &lt;a href="mailto:alstof@gmail.com"&gt;alstof&lt;/a&gt; </copyright><lastBuildDate>Sat, 04 Aug 2018 00:25:01 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Plan and done for May-27-2018</title><link>https://al1s.github.io/ru/posts/plan-and-done-for-may-27-2018/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-will-i-learn-today"&gt;
&lt;h2&gt;What will I learn today?&lt;/h2&gt;
&lt;p&gt;FreeCodeCamp React projects: Camper Leaderboard.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="done"&gt;
&lt;h2&gt;Done&lt;/h2&gt;
&lt;div class="section" id="challenges"&gt;
&lt;h3&gt;Challenges&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I want to use async/await for fetching data but what about catching errors?&lt;/li&gt;
&lt;li&gt;When and where to fetch initial data to React app?&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="solutions"&gt;
&lt;h3&gt;Solutions&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Here is the &lt;a class="reference external" href="https://blog.grossman.io/how-to-write-async-await-without-try-catch-blocks-in-javascript/"&gt;receipt&lt;/a&gt; to do it with style:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_e8d6e7effe354d17ad5be7f8f6e84906-1"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_e8d6e7effe354d17ad5be7f8f6e84906-2"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_e8d6e7effe354d17ad5be7f8f6e84906-3"&gt;&lt;/a&gt;      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;a name="rest_code_e8d6e7effe354d17ad5be7f8f6e84906-4"&gt;&lt;/a&gt;    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;a name="rest_code_e8d6e7effe354d17ad5be7f8f6e84906-5"&gt;&lt;/a&gt;    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;a name="rest_code_e8d6e7effe354d17ad5be7f8f6e84906-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;The right place is &lt;code&gt;componentDidMount&lt;/code&gt;. An explanation - &lt;a class="reference external" href="https://zhenyong.github.io/react/tips/initial-ajax.html"&gt;Initial data via AJAX&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://al1s.github.io/ru/posts/plan-and-done-for-may-27-2018/</guid><pubDate>Sun, 27 May 2018 13:03:31 GMT</pubDate></item><item><title>plan-and-done-for-may-06-2018</title><link>https://al1s.github.io/ru/posts/plan-and-done-for-may-06-2018/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-will-i-learn-today"&gt;
&lt;h2&gt;What will I learn today?&lt;/h2&gt;
&lt;p&gt;FreeCodeCamp React projects: Markdown online parser - start coding.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="done"&gt;
&lt;h2&gt;Done&lt;/h2&gt;
&lt;div class="section" id="online-markdown-editor-app"&gt;
&lt;h3&gt;Online markdown editor app&lt;/h3&gt;
&lt;p&gt;The user &lt;a class="reference external" href="https://www.freecodecamp.org/challenges/build-a-markdown-previewer"&gt;story&lt;/a&gt; and the desired result.&lt;/p&gt;
&lt;div class="section" id="challenges"&gt;
&lt;h4&gt;Challenges&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Estimated size of the bundle over 50kB gzipped.&lt;/li&gt;
&lt;li&gt;How to make browsersync work with react application?&lt;/li&gt;
&lt;li&gt;Can't make work webpack hot reload with gulp.&lt;/li&gt;
&lt;li&gt;How to render escaped HTML inside component?&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="solutions"&gt;
&lt;h4&gt;Solutions&lt;/h4&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/facebook/react/issues/10780"&gt;Explanation&lt;/a&gt; from Dan Abramov. Google for &lt;a class="reference external" href="https://www.google.com/search?q=webpack+different+plugins+for+production+and+development&amp;amp;ie=utf-8&amp;amp;oe=utf-8&amp;amp;client=firefox-b-ab"&gt;solution alternatives&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I've found this &lt;a class="reference external" href="https://words.mxbry.com/making-react-webpack-browsersync-gulp-play-nice-and-hot-reload-b2c1e01522e3"&gt;receipt&lt;/a&gt;. Here is an example of &lt;a class="reference external" href="https://github.com/BrowserSync/recipes/blob/master/recipes/webpack.react-hot-loader/webpack.config.js"&gt;config&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The problem looks like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
react-hot-loader\index.js' is not a loader (must have normal or pitch function)
&lt;/pre&gt;
&lt;p&gt;To solve it we need to move &lt;code&gt;react-hot-loader&lt;/code&gt; from webpack.config.js to .babelrc as described in Dan's &lt;a class="reference external" href="http://gaearon.github.io/react-hot-loader/getstarted/"&gt;post&lt;/a&gt; (check step 3.2.a).&lt;/p&gt;
&lt;p&gt;Second problem with dependencies of eslint and depricated rule &lt;code&gt;jsx-a11y/href-no-hash&lt;/code&gt;. Solved it including to rules into .eslintrc - &lt;code&gt;"jsx-a11y/href-no-hash": 2, "jsx-a11y/anchor-is-valid": 2&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;Third problem is the working server doesn't produce bundle.js. But as I've got it's not a bug but a feature - webpack doesn't generate output when it runs in with devServer.&lt;/p&gt;
&lt;p&gt;Fourth problem is server does rebuild, but after checking for update and finding the updated module doesn't hot reload react components saying:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
App is up to date.
&lt;/pre&gt;
&lt;p&gt;Solved it after a couple of hours by reading different issues (&lt;a class="reference external" href="https://github.com/gaearon/react-hot-loader/issues/581"&gt;#581&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/gaearon/react-hot-loader/issues/100"&gt;#100&lt;/a&gt; gave me a clue) and finally using manual of &lt;a class="reference external" href="https://github.com/gaearon/react-hot-loader#code-splitting"&gt;react-hot-reload&lt;/a&gt;. I've exported all my components as hot.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I've got escaped HTML result of a &lt;a class="reference external" href="https://github.com/markedjs/marked"&gt;markdown converter&lt;/a&gt; function. When I tried to put the result into an output component on the page I got raw HTML on the page. The way to convert it into renderable HTML is to use weird function &lt;code&gt;dangerouslySetInnerHTML&lt;/code&gt; as described on &lt;a class="reference external" href="https://stackoverflow.com/a/19277723"&gt;SO page&lt;/a&gt; . Here is a &lt;a class="reference external" href="https://github.com/facebook/react/issues/2778"&gt;bit&lt;/a&gt; about the function name and sense begind it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://al1s.github.io/ru/posts/plan-and-done-for-may-06-2018/</guid><pubDate>Sun, 06 May 2018 13:23:31 GMT</pubDate></item><item><title>Plan and done for October-22-2017</title><link>https://al1s.github.io/ru/posts/plan-and-done-for-october-22-2017/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-will-i-learn-today"&gt;
&lt;h2&gt;What will I learn today?&lt;/h2&gt;
&lt;p&gt;Sentence cooker - application to practice english grammar.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="done"&gt;
&lt;h2&gt;Done&lt;/h2&gt;
&lt;p&gt;Delete buffer in VIM with additional plugin (&lt;a class="reference external" href="https://github.com/d11wtq/ctrlp_bdelete.vim"&gt;https://github.com/d11wtq/ctrlp_bdelete.vim&lt;/a&gt;) installed:&lt;/p&gt;
&lt;blockquote&gt;
Open ctrlp in buffer mode (&lt;code&gt;c-p c-b&lt;/code&gt;), filter as needed, navigate to a buffer you wish to close and press &lt;code&gt;c-@ (c-2)&lt;/code&gt;. The buffer will be deleted and will disappear from the list.&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://al1s.github.io/ru/posts/plan-and-done-for-october-22-2017/</guid><pubDate>Sun, 22 Oct 2017 12:32:31 GMT</pubDate></item></channel></rss>