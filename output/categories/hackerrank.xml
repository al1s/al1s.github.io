<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Learn another day (Posts about hackerrank)</title><link>https://al1s.github.io/</link><description></description><atom:link type="application/rss+xml" rel="self" href="https://al1s.github.io/categories/hackerrank.xml"></atom:link><language>en</language><copyright>Contents Â© 2018 &lt;a href="mailto:alstof@gmail.com"&gt;alstof&lt;/a&gt; </copyright><lastBuildDate>Thu, 28 Jun 2018 21:37:03 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Plan and done for July-12-2017</title><link>https://al1s.github.io/posts/plan-and-done-for-july-12-2017/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-will-i-learn-today"&gt;
&lt;h2&gt;What will I learn today?&lt;/h2&gt;
&lt;p&gt;Dive into JS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="done"&gt;
&lt;h2&gt;Done&lt;/h2&gt;
&lt;p&gt;I've solved Queen attack II. It wasn't hard, but in some way mind bending. The next two challenges are Roads and libraries - &lt;a class="reference external" href="https://www.hackerrank.com/challenges/torque-and-development"&gt;https://www.hackerrank.com/challenges/torque-and-development&lt;/a&gt; and Climbing the leaderboard - &lt;a class="reference external" href="https://www.hackerrank.com/challenges/climbing-the-leaderboard"&gt;https://www.hackerrank.com/challenges/climbing-the-leaderboard&lt;/a&gt;. I solved both, but my solutions didn't meet time complexity criteria, so now I'm in optimization mode.&lt;/p&gt;
&lt;p&gt;My approach to Roads and libs is:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The idea is to find whether we have a connected graph.&lt;/li&gt;
&lt;li&gt;If not, then we need at least the same number of libraries as independent graphs.&lt;/li&gt;
&lt;li&gt;If graph is connected, we build at least one library.&lt;/li&gt;
&lt;li&gt;If library cost &amp;gt; road cost, fix all roads, otherwise, build a library in every town.&lt;/li&gt;
&lt;li&gt;In order to find the graph roots and edges I built node adjacency list and all nodes list.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last two are sources of latency. At first I tried to build all nodes list by concatenating all nodes within &lt;code&gt;forEach&lt;/code&gt; loop and then moving the result into a set to get a list of nodes without repetitions. I've got rid of concatenation, and just pushed all nodes into flat array and then copied it into a set. The adjacency list is looked harder. I want to get a list of all nodes with their neighbours for each. I use for it an array and each position is my node number filled with arrays of neighbours. Maybe the better idea is to use object for storing the list.&lt;/p&gt;
&lt;p&gt;In order to understand how my solution works under load I use a dataset I've found under the first link here - &lt;a class="reference external" href="https://cstheory.stackexchange.com/a/740"&gt;https://cstheory.stackexchange.com/a/740&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The solution works faster with an object as a storage of adjacency list, but it fails HR performance tests.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>hackerrank</category><category>javascript</category><guid>https://al1s.github.io/posts/plan-and-done-for-july-12-2017/</guid><pubDate>Wed, 12 Jul 2017 20:25:31 GMT</pubDate></item><item><title>Plan and done for July-04-2017</title><link>https://al1s.github.io/posts/plan-and-done-for-july-04-2017/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-will-i-learn-today"&gt;
&lt;h2&gt;What will I learn today?&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Dive into JS.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="done"&gt;
&lt;h2&gt;Done&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Moving to another appartment took tons of time and efforts. Now we've settled and I'm able to continue my practice. The last problem was too tough. I'm stuck with all exceptional cases and it still doesn't pass all tests. Let's move on.&lt;/p&gt;
&lt;p&gt;Next problem is Queen attack II - &lt;a class="reference external" href="https://www.hackerrank.com/challenges/queens-attack-2"&gt;https://www.hackerrank.com/challenges/queens-attack-2&lt;/a&gt;. The approach was to take it as a distance appraisal problem. There is only 2d space with relative center of coordinates (which is a queen position) and available routes on it (only vertical, horizontal and both diagonals). And the solution is to find length of each route and get a total:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;appraise whether an obstacle is on any available route and find distance to each;&lt;/li&gt;
&lt;li&gt;find distance from queen position to any side of the board in any direction available.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My first thought was to implement a simple function which would return me a distance in math way - as a square root of the sum of squared differences of respective point coordinates. It's obvious that it won't work - I have longer distances diagonally, than in vertical and horizontal directions. Next move - why not take it simpler: the distance in board squares is already here - it's just any of coordinates (because my diagonals are at 45 degrees to horizontal line).&lt;/p&gt;
&lt;p&gt;The next question was how to find whether an obstacle is on the queen way or not? The solution was to find the angle between two sections. The most obvious way is to find a tangent (because I already know both cathetus - they are just obstacle coordinates) and apply &lt;code&gt;Math.atan&lt;/code&gt; to it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>hackerrank</category><category>javascript</category><guid>https://al1s.github.io/posts/plan-and-done-for-july-04-2017/</guid><pubDate>Tue, 04 Jul 2017 12:03:31 GMT</pubDate></item><item><title>Plan and done for June-22-2017</title><link>https://al1s.github.io/posts/plan-and-done-for-june-22-2017/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-will-i-learn-today"&gt;
&lt;h2&gt;What will I learn today?&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Dive into JS.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="done"&gt;
&lt;h2&gt;Done&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Stuck a little with the yesterday's problem. The reason - can't add up only those remainder's groups which don't give a divider mutually - I've set an array of 'banned' remainders and try to use it inside &lt;code&gt;Array.prototype.reduce()&lt;/code&gt; but it seems like it's not seen inside &lt;code&gt;reduce&lt;/code&gt; loop.&lt;/p&gt;
&lt;p&gt;The solution for this was quite easy - I added to an array numbers and checked if an element is included with a string equivalent. Added plus sign before an element so it looked like &lt;code&gt;Arr.includes(+num)&lt;/code&gt; and everything started to work great.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>hackerrank</category><category>web-dev</category><guid>https://al1s.github.io/posts/plan-and-done-for-june-22-2017/</guid><pubDate>Thu, 22 Jun 2017 19:47:31 GMT</pubDate></item><item><title>Plan and done for June-21-2017</title><link>https://al1s.github.io/posts/plan-and-done-for-june-21-2017/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-will-i-learn-today"&gt;
&lt;h2&gt;What will I learn today?&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Dive into JS.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="done"&gt;
&lt;h2&gt;Done&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Today's problem is about properties of dividing integers - &lt;a class="reference external" href="https://www.hackerrank.com/challenges/non-divisible-subset"&gt;https://www.hackerrank.com/challenges/non-divisible-subset&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Sum of which numbers isn't dividable by third number? The brute-force approach is to check each combination of two numbers in a set has O(n^2) complexity. I want it to be better.&lt;/p&gt;
&lt;p&gt;Division is an opposite to multiplication and the last is just a compressed version of addition:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
9 / 3 = 3 =&amp;gt; 3 * 3 = 9 =&amp;gt; 3 + 3 + 3 = 9;
&lt;/pre&gt;
&lt;p&gt;If the number isn't dividable by other number it means we have a skewed view of addition:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
10 / 3 = 3.333(3) =&amp;gt; 3.3(3) * 3 = 10, but let's make it simpler: 3 + 3 + 3 + 1 = 10;
&lt;/pre&gt;
&lt;p&gt;The only thing that changes is the last addendum - we have the remainder now. Let's add some numbers to our &lt;tt class="docutils literal"&gt;10&lt;/tt&gt; and look what'll happen.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
10 + 1 = 11 =&amp;gt; 3 + 3 + 3 + (1 + 1) = 11 =&amp;gt; 3 + 3 + 3 + 2 = 11;
11 / 3 = 3 remainder 2;

10 + 2 = 12 =&amp;gt; 3 + 3 + 3 + (1 + 2) = 12 =&amp;gt; 3 + 3 + 3 + 3 = 12;
12 / 3 = 4;

10 + 5 = 15 =&amp;gt; 3 + 3 + 3 + (1 + 2) + 3 = 15 =&amp;gt; 3 + 3 + 3 + 3 + 3 = 15;
&lt;/pre&gt;
&lt;p&gt;Looks like the remainders of two addendums divided by the third number shouldn't add up to divisable number if we want the sum won't. My approach according to above is to accumulate all numbers in a given set into dictionary using remainder as a key. Then choose the largest groups which remainders sum will not be dividable and sum all such groups together. It will be the answer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>hackerrank</category><category>web-dev</category><guid>https://al1s.github.io/posts/plan-and-done-for-june-21-2017/</guid><pubDate>Wed, 21 Jun 2017 17:13:31 GMT</pubDate></item><item><title>Plan and done for June-20-2017</title><link>https://al1s.github.io/posts/plan-and-done-for-june-20-2017/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-will-i-learn-today"&gt;
&lt;h2&gt;What will I learn today?&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Dive into JS.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="done"&gt;
&lt;h2&gt;Done&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;I'm still on the same problem as yesterday - &lt;a class="reference external" href="https://www.hackerrank.com/challenges/sherlock-and-squares"&gt;https://www.hackerrank.com/challenges/sherlock-and-squares&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My initial approach was overcomplicated way of thoughts (as usual). The solution was much simpler - just find two square roots of given numbers and round them to ceil and floor respectfully. The difference between calculated roots increaces by one is the answer except the case when both given numbers are equal.&lt;/p&gt;
&lt;p&gt;While my attempts to figure out why HR built-in tests were failing I decided to switch to my local test suit. After short analysis of different testing frameworks I stopped on Jasmine - it has everything I need already integrated, opposite to Mocha, where assertion framework should be chosen separately. Jasmine is well documented so to integrate test inside a browser was easy.&lt;/p&gt;
&lt;p&gt;It was challenging to implement the test itself - I wanted to generate randomly both boundaries and then knowing what were initial values for calculating powers of two and if I know initials than it's easy to get how many values I have in between. The challenge was to get a random value exluding upper and lower boundaries - MDN advices on &lt;code&gt;random&lt;/code&gt; are about inclusive implementations. Finally I've got it by increasing and decreasing low and high limits of squares.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>hackerrank</category><category>web-dev</category><guid>https://al1s.github.io/posts/plan-and-done-for-june-20-2017/</guid><pubDate>Tue, 20 Jun 2017 11:35:31 GMT</pubDate></item><item><title>Plan and done for June-19-2017</title><link>https://al1s.github.io/posts/plan-and-done-for-june-19-2017/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-will-i-learn-today"&gt;
&lt;h2&gt;What will I learn today?&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Dive into JS.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="done"&gt;
&lt;h2&gt;Done&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;The next problem - &lt;a class="reference external" href="https://www.hackerrank.com/challenges/sherlock-and-squares"&gt;https://www.hackerrank.com/challenges/sherlock-and-squares&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My initial approach was based on calculating increments between difference of current and the next square root. The reasoning looked like this:&lt;/p&gt;
&lt;p&gt;Let's assume, that we know the sequence of full square difference:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
            1, 2, 3, 4,  5,  6,  7,  8,  9...
for the row 1, 4, 9, 16, 25, 36, 49, 64, 81...
it would be   3, 5, 7,  9,  11, 13, 15, 17...
so each time the difference increases by 2.
&lt;/pre&gt;
&lt;p&gt;The formula for it is 2*n - 1, where n is our initial number. Then to solve the problem just get the square root of the first number and find the difference, then check if my second given number within it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>hackerrank</category><category>web-dev</category><guid>https://al1s.github.io/posts/plan-and-done-for-june-19-2017/</guid><pubDate>Mon, 19 Jun 2017 11:35:31 GMT</pubDate></item><item><title>Plan and done for June-18-2017</title><link>https://al1s.github.io/posts/plan-and-done-for-june-18-2017/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-will-i-learn-today"&gt;
&lt;h2&gt;What will I learn today?&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Dive into JS.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="done"&gt;
&lt;h2&gt;Done&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Switched to hackerrank - &lt;a class="reference external" href="https://www.hackerrank.com"&gt;https://www.hackerrank.com&lt;/a&gt; - for a while to practice algorithms and to improve velocity in coding with Javascript, get fluency in it.&lt;/p&gt;
&lt;p&gt;There were two problems that I've solved - find the cost of transformation of any 3x3 matrix into a magic square matrix (&lt;a class="reference external" href="https://www.hackerrank.com/challenges/magic-square-forming"&gt;https://www.hackerrank.com/challenges/magic-square-forming&lt;/a&gt;); manipulate given strings symbol by symbol to morph one into another (&lt;a class="reference external" href="https://www.hackerrank.com/challenges/append-and-delete"&gt;https://www.hackerrank.com/challenges/append-and-delete&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;RescueTime (&lt;a class="reference external" href="https://www.rescuetime.com"&gt;https://www.rescuetime.com&lt;/a&gt;) said that I've spent almost 8 hours. What is this? First three hours I tried to get into approach to magic square solution. First I used Excel in search of some hints on how to calculate it faster. Then I just switched into Octave and started matrix manipulation routines - rotation, flipping, substracting. It showed results so I get back to code editor and implemented all these basic matrix transformations in JS. The final solution was easy when I've got all tools needed. Limit is that the matrix could be only 3x3. The main reason for the limit is that I don't understand quite well how to find all possible matrix rotation and flipping algorithmically. There are some interesting links: how to build an array filled with constants - &lt;a class="reference external" href="https://stackoverflow.com/a/13735425"&gt;https://stackoverflow.com/a/13735425&lt;/a&gt;; someone's example of rotation of any matrix - &lt;a class="reference external" href="http://jsfiddle.net/MrPolywhirl/NH42z/"&gt;http://jsfiddle.net/MrPolywhirl/NH42z/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And the second problem was much easier to solve - RescueTime showed it took only 1.5 hours.&lt;/p&gt;
&lt;p&gt;Too slow...&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>hackerrank</category><category>web-dev</category><guid>https://al1s.github.io/posts/plan-and-done-for-june-18-2017/</guid><pubDate>Sun, 18 Jun 2017 12:22:31 GMT</pubDate></item></channel></rss>