<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>Learn another day (Posts about freeCodeCamp)</title><link>https://al1s.github.io/</link><description></description><atom:link rel="self" href="https://al1s.github.io/categories/freecodecamp.xml" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2018 &lt;a href="mailto:alstof@gmail.com"&gt;alstof&lt;/a&gt; </copyright><lastBuildDate>Sat, 04 Aug 2018 00:25:01 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Plan and done for May-27-2018</title><link>https://al1s.github.io/posts/plan-and-done-for-may-27-2018/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-will-i-learn-today"&gt;
&lt;h2&gt;What will I learn today?&lt;/h2&gt;
&lt;p&gt;FreeCodeCamp React projects: Camper Leaderboard.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="done"&gt;
&lt;h2&gt;Done&lt;/h2&gt;
&lt;div class="section" id="challenges"&gt;
&lt;h3&gt;Challenges&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I want to use async/await for fetching data but what about catching errors?&lt;/li&gt;
&lt;li&gt;When and where to fetch initial data to React app?&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="solutions"&gt;
&lt;h3&gt;Solutions&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Here is the &lt;a class="reference external" href="https://blog.grossman.io/how-to-write-async-await-without-try-catch-blocks-in-javascript/"&gt;receipt&lt;/a&gt; to do it with style:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_e8d6e7effe354d17ad5be7f8f6e84906-1"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_e8d6e7effe354d17ad5be7f8f6e84906-2"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_e8d6e7effe354d17ad5be7f8f6e84906-3"&gt;&lt;/a&gt;      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;a name="rest_code_e8d6e7effe354d17ad5be7f8f6e84906-4"&gt;&lt;/a&gt;    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;a name="rest_code_e8d6e7effe354d17ad5be7f8f6e84906-5"&gt;&lt;/a&gt;    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;a name="rest_code_e8d6e7effe354d17ad5be7f8f6e84906-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;The right place is &lt;code&gt;componentDidMount&lt;/code&gt;. An explanation - &lt;a class="reference external" href="https://zhenyong.github.io/react/tips/initial-ajax.html"&gt;Initial data via AJAX&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>freeCodeCamp</category><category>javascript</category><category>React</category><guid>https://al1s.github.io/posts/plan-and-done-for-may-27-2018/</guid><pubDate>Sun, 27 May 2018 13:03:31 GMT</pubDate></item><item><title>plan-and-done-for-may-06-2018</title><link>https://al1s.github.io/posts/plan-and-done-for-may-06-2018/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-will-i-learn-today"&gt;
&lt;h2&gt;What will I learn today?&lt;/h2&gt;
&lt;p&gt;FreeCodeCamp React projects: Markdown online parser - start coding.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="done"&gt;
&lt;h2&gt;Done&lt;/h2&gt;
&lt;div class="section" id="online-markdown-editor-app"&gt;
&lt;h3&gt;Online markdown editor app&lt;/h3&gt;
&lt;p&gt;The user &lt;a class="reference external" href="https://www.freecodecamp.org/challenges/build-a-markdown-previewer"&gt;story&lt;/a&gt; and the desired result.&lt;/p&gt;
&lt;div class="section" id="challenges"&gt;
&lt;h4&gt;Challenges&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Estimated size of the bundle over 50kB gzipped.&lt;/li&gt;
&lt;li&gt;How to make browsersync work with react application?&lt;/li&gt;
&lt;li&gt;Can't make work webpack hot reload with gulp.&lt;/li&gt;
&lt;li&gt;How to render escaped HTML inside component?&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="solutions"&gt;
&lt;h4&gt;Solutions&lt;/h4&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/facebook/react/issues/10780"&gt;Explanation&lt;/a&gt; from Dan Abramov. Google for &lt;a class="reference external" href="https://www.google.com/search?q=webpack+different+plugins+for+production+and+development&amp;amp;ie=utf-8&amp;amp;oe=utf-8&amp;amp;client=firefox-b-ab"&gt;solution alternatives&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I've found this &lt;a class="reference external" href="https://words.mxbry.com/making-react-webpack-browsersync-gulp-play-nice-and-hot-reload-b2c1e01522e3"&gt;receipt&lt;/a&gt;. Here is an example of &lt;a class="reference external" href="https://github.com/BrowserSync/recipes/blob/master/recipes/webpack.react-hot-loader/webpack.config.js"&gt;config&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The problem looks like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
react-hot-loader\index.js' is not a loader (must have normal or pitch function)
&lt;/pre&gt;
&lt;p&gt;To solve it we need to move &lt;code&gt;react-hot-loader&lt;/code&gt; from webpack.config.js to .babelrc as described in Dan's &lt;a class="reference external" href="http://gaearon.github.io/react-hot-loader/getstarted/"&gt;post&lt;/a&gt; (check step 3.2.a).&lt;/p&gt;
&lt;p&gt;Second problem with dependencies of eslint and depricated rule &lt;code&gt;jsx-a11y/href-no-hash&lt;/code&gt;. Solved it including to rules into .eslintrc - &lt;code&gt;"jsx-a11y/href-no-hash": 2, "jsx-a11y/anchor-is-valid": 2&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;Third problem is the working server doesn't produce bundle.js. But as I've got it's not a bug but a feature - webpack doesn't generate output when it runs in with devServer.&lt;/p&gt;
&lt;p&gt;Fourth problem is server does rebuild, but after checking for update and finding the updated module doesn't hot reload react components saying:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
App is up to date.
&lt;/pre&gt;
&lt;p&gt;Solved it after a couple of hours by reading different issues (&lt;a class="reference external" href="https://github.com/gaearon/react-hot-loader/issues/581"&gt;#581&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/gaearon/react-hot-loader/issues/100"&gt;#100&lt;/a&gt; gave me a clue) and finally using manual of &lt;a class="reference external" href="https://github.com/gaearon/react-hot-loader#code-splitting"&gt;react-hot-reload&lt;/a&gt;. I've exported all my components as hot.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I've got escaped HTML result of a &lt;a class="reference external" href="https://github.com/markedjs/marked"&gt;markdown converter&lt;/a&gt; function. When I tried to put the result into an output component on the page I got raw HTML on the page. The way to convert it into renderable HTML is to use weird function &lt;code&gt;dangerouslySetInnerHTML&lt;/code&gt; as described on &lt;a class="reference external" href="https://stackoverflow.com/a/19277723"&gt;SO page&lt;/a&gt; . Here is a &lt;a class="reference external" href="https://github.com/facebook/react/issues/2778"&gt;bit&lt;/a&gt; about the function name and sense begind it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>freeCodeCamp</category><category>javascript</category><category>React</category><guid>https://al1s.github.io/posts/plan-and-done-for-may-06-2018/</guid><pubDate>Sun, 06 May 2018 13:23:31 GMT</pubDate></item><item><title>Plan and done for April 15 - May 05</title><link>https://al1s.github.io/posts/plan-and-done-for-april-15-2018/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-will-i-learn-today"&gt;
&lt;h2&gt;What will I learn today?&lt;/h2&gt;
&lt;p&gt;FreeCodeCamp projects: Simon game - start coding.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="done"&gt;
&lt;h2&gt;Done&lt;/h2&gt;
&lt;div class="section" id="simon-game-app"&gt;
&lt;h3&gt;Simon game app&lt;/h3&gt;
&lt;p&gt;The user &lt;a class="reference external" href="https://www.freecodecamp.org/challenges/build-a-simon-game"&gt;story&lt;/a&gt; and the desired result.&lt;/p&gt;
&lt;div class="section" id="game-process"&gt;
&lt;h4&gt;Game process&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;On Start game load the game engine.&lt;/li&gt;
&lt;li&gt;Choose a random sequence and keep it as current.&lt;/li&gt;
&lt;li&gt;Save current game position - 1.&lt;/li&gt;
&lt;li&gt;Play sequence from beginning to the current position inclusive.&lt;/li&gt;
&lt;li&gt;Wait for user input.&lt;/li&gt;
&lt;li&gt;Compare each entered element with corresponding element in sequence.&lt;/li&gt;
&lt;li&gt;On error: show message; buzz.&lt;/li&gt;
&lt;li&gt;On success: move current position one element right; repeat from step 3.&lt;/li&gt;
&lt;li&gt;On success in strict mode: repeat from step 2.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="challenges"&gt;
&lt;h4&gt;Challenges&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;What is the Simon game?&lt;/li&gt;
&lt;li&gt;How to get sectors?&lt;/li&gt;
&lt;li&gt;How to play sound?&lt;/li&gt;
&lt;li&gt;How to make color of the sector blink lighter on click or touch?&lt;/li&gt;
&lt;li&gt;How to produce a sequence of sounds?&lt;/li&gt;
&lt;li&gt;How to make the shape of active element not squared?&lt;/li&gt;
&lt;li&gt;How to inform user about winning in the game?&lt;/li&gt;
&lt;li&gt;How to make delays to handle state changes in UI more smoothly?&lt;/li&gt;
&lt;li&gt;How to synchronize ending of Web Audio API Oscillator play with UI?&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="solutions"&gt;
&lt;h4&gt;Solutions&lt;/h4&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Simon_(game)"&gt;Explanation&lt;/a&gt; on the Simon game.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We can get circle sectors by &lt;a class="reference external" href="https://stackoverflow.com/questions/21205652/how-to-draw-a-circle-sector-in-css"&gt;CSS hacking&lt;/a&gt; for div elements with special background filling or trasformations. It's many lines of an unintuitive code. My way is to set a background image for each sector to inline SVG. Code is very intelligible and clear:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_1cb9b6a9fd2d40a498cb86519efd1af0-1"&gt;&lt;/a&gt;&amp;lt;svg
&lt;a name="rest_code_1cb9b6a9fd2d40a498cb86519efd1af0-2"&gt;&lt;/a&gt;   xmlns="http://www.w3.org/2000/svg"
&lt;a name="rest_code_1cb9b6a9fd2d40a498cb86519efd1af0-3"&gt;&lt;/a&gt;   viewBox="0 0 200 200"
&lt;a name="rest_code_1cb9b6a9fd2d40a498cb86519efd1af0-4"&gt;&lt;/a&gt;   id="fourColorsCircle"&amp;gt;
&lt;a name="rest_code_1cb9b6a9fd2d40a498cb86519efd1af0-5"&gt;&lt;/a&gt;  &amp;lt;path fill="red"    d="M100,100 L100,0   A100,100 1 0,1 200,100 z" id="sector_XY" /&amp;gt;
&lt;a name="rest_code_1cb9b6a9fd2d40a498cb86519efd1af0-6"&gt;&lt;/a&gt;  &amp;lt;path fill="blue"   d="M100,100 L200,100 A100,100 1 0,1 100,200 z" id="sector_Xy" /&amp;gt;
&lt;a name="rest_code_1cb9b6a9fd2d40a498cb86519efd1af0-7"&gt;&lt;/a&gt;  &amp;lt;path fill="yellow" d="M100,100 L100,200 A100,100 1 0,1 0,100   z" id="sector_xy" /&amp;gt;
&lt;a name="rest_code_1cb9b6a9fd2d40a498cb86519efd1af0-8"&gt;&lt;/a&gt;  &amp;lt;path fill="green"  d="M100,100 L0,100   A100,100 1 0,1 100,0   z" id="sector_xY" /&amp;gt;
&lt;a name="rest_code_1cb9b6a9fd2d40a498cb86519efd1af0-9"&gt;&lt;/a&gt;&amp;lt;/svg&amp;gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Use Web Audio API to make sounds out of HTML. Great explanation with a working code is at &lt;a class="reference external" href="https://css-tricks.com/introduction-web-audio-api/"&gt;CSS tricks&lt;/a&gt;. Oscilator with sine wave form at a given frequency with Gain node to control fade out.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;There is SVG modified for any touched element or inner shadow for the element (but it doesn't work with SVG). There is &lt;code&gt;lighten&lt;/code&gt; function in LESS but I don't want to add another framework (even if it's just CSS post-processing framework) just because of one function. I've tried to use &lt;code&gt;filter: opacity&lt;/code&gt; in CSS as described in the &lt;a class="reference external" href="https://codepen.io/noahblon/post/coloring-svgs-in-css-background-images"&gt;post&lt;/a&gt;, but it produces different result on different colors - works best on green and worse on red. Finally I replace SVG for a second on key pressed to its brighter version.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The problem is the Web Audio API oscilators are played at once despite they are played in a loop. The way to manage sequences I need to set exact time spot for each note to be played, schedule it. Here is the &lt;a class="reference external" href="http://catarak.github.io/blog/2014/12/02/web-audio-timing-tutorial/"&gt;first&lt;/a&gt;  short and the &lt;a class="reference external" href="https://www.html5rocks.com/en/tutorials/audio/scheduling/"&gt;second&lt;/a&gt; much thorough explanation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I want the game to be accessible, but I don't like the shape of common active outline. Couldn't find any advices on making it more acceptable - not just plain squared, but something that repeats the form of the original element. Variant - to implement the whole keyboard layout to play the game with ARIA description on key mapping.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I want some fanfare-like sound. And the only thing that come to my mind is ta-da-da-daaa-da-da from hockey matches timeouts. Looked at Wiki and after a while I've found it is the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Charge_(fanfare)"&gt;Charge!&lt;/a&gt;. In order to play it through the tone generator I had to implement additional function which let me to play chords and set note duration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;One way to do it is to put &lt;code&gt;setTimeout()&lt;/code&gt; everywhere I want a delay. But it makes it harder to deal with a sequence of delays or a sequence of UI interactions. I want a &lt;code&gt;Promise()&lt;/code&gt; power to chain all interactions in a highly visible structure. SO gives an &lt;a class="reference external" href="https://stackoverflow.com/questions/22707475/how-to-make-a-promise-from-settimeout"&gt;example&lt;/a&gt; of such implementation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I want to pause listening on buttons while the app is playing a sequence: it could be inconsistent for a user to press a button during the play and wait for it to be consumed by an app as a sequential input. The problem is that an osicllator neither has callback nor returns a promise. After a little research I've &lt;a class="reference external" href="https://stackoverflow.com/a/32848139"&gt;found&lt;/a&gt; a solution in the form of an &lt;code&gt;onended&lt;/code&gt; event of an Oscillator node (&lt;a class="reference external" href="https://webaudio.github.io/web-audio-api/#dom-audioscheduledsourcenode-onended"&gt;here&lt;/a&gt; is description). The final solution is to implement a sequence player to return a promise of all promises and a tone player to return a promise on &lt;code&gt;onended&lt;/code&gt; event. But there is another problem. Gain node provides a fade-out and goes on even when the sound is barely audible but the UI is still frozen. It's inconsistent for a user to hear or see nor activity from an app but being unable to interact with it. In order to produce more reliable behavior I exluded the last tone from a waiting list and during it's play the user may start interact with the app.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>freeCodeCamp</category><category>javascript</category><guid>https://al1s.github.io/posts/plan-and-done-for-april-15-2018/</guid><pubDate>Sun, 15 Apr 2018 13:00:31 GMT</pubDate></item><item><title>Plan and done for February-19-2018</title><link>https://al1s.github.io/posts/plan-and-done-for-february-19-2018/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-will-i-learn-today"&gt;
&lt;h2&gt;What will I learn today?&lt;/h2&gt;
&lt;p&gt;FreeCodeCamp projects: TicTacToe - start coding.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="done"&gt;
&lt;h2&gt;Done&lt;/h2&gt;
&lt;div class="section" id="tictactoe-app"&gt;
&lt;h3&gt;TicTacToe app&lt;/h3&gt;
&lt;div class="section" id="challenges"&gt;
&lt;h4&gt;Challenges&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;How to implement game engine - what is the algorithm inside it?&lt;/li&gt;
&lt;li&gt;What is a winning in terms of algorithmical calculation - how to calculate that I have winning condition on the board?&lt;/li&gt;
&lt;li&gt;How to find which player's turn next?&lt;/li&gt;
&lt;li&gt;What is 'empty' value in an Array generated by &lt;code&gt;new Array(number)&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;After implementation of minimax I've found myself with an utility value but without moves - how could I add to minimax return any sugestions on the next move?&lt;/li&gt;
&lt;li&gt;How to pass a parameter to an event callback function?&lt;/li&gt;
&lt;li&gt;How to make the engine work in async with UI and prevent itching in a player interaction with the game?&lt;/li&gt;
&lt;li&gt;How to restart the game after we've got either winning or draw conditions?&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="solutions"&gt;
&lt;h4&gt;Solutions&lt;/h4&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Algo - minimax as it described in the &lt;a class="reference external" href="https://en.wikipedia.org/w/index.php?title=Minimax&amp;amp;section=8#Minimax_algorithm_with_alternate_moves"&gt;Wiki page&lt;/a&gt;. Another explanations are at Youtube - &lt;a class="reference external" href="https://www.youtube.com/watch?v=STjW3eH0Cik"&gt;academic&lt;/a&gt;, less &lt;a class="reference external" href="https://www.youtube.com/watch?v=6ELUvkSkCts"&gt;formal&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;SO gives the algorithm to estimate an &lt;a class="reference external" href="https://stackoverflow.com/a/1056352/2255031"&gt;answer&lt;/a&gt;. I have alternative approach - find masks which represent winning, transform board into binary representation and apply mask to it. If result is the same as mask applied - here's winning position. The question: what is efficiency for each approach? For SO algo the complexity is O(n), n - is dimension of the board. For my approach - O(n^2 + n).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I can track the current player or just get it from the board state. I'll use reduce for it:
&lt;code&gt;array.reduce((res,elm) =&amp;gt; elm ? res + 1 : res,0)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Unbelievably long search why my &lt;code&gt;toString&lt;/code&gt; didn't work the right way - it just silently swallowed empty values. Here is a good snippet to &lt;a class="reference external" href="https://www.sitepoint.com/testing-for-empty-values/"&gt;detect&lt;/a&gt; empty values in Array.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I shouldn't - I've implemented the separate chooseMove() function where I initialize all available moves with their utility values and than I just choose the best or any depending whether utility equal for multiple values or not.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We can either bind &lt;cite&gt;this&lt;/cite&gt; with additional paramenter to the function - take a look &lt;a class="reference external" href="https://stackoverflow.com/a/28331157"&gt;here&lt;/a&gt;. I've tried to use an arrow function as a callback, but it prevents me from removing listener down the road. Final approach is to make cells distinguishable by &lt;code&gt;id&lt;/code&gt; and communicate through the DOM:&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_1a490a8c7b3a46eea0a702d7318d6335-1"&gt;&lt;/a&gt;&lt;span class="nx"&gt;boardCells&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ndx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_1a490a8c7b3a46eea0a702d7318d6335-2"&gt;&lt;/a&gt;  &lt;span class="nx"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'click'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleBoardClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ndx&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;a name="rest_code_1a490a8c7b3a46eea0a702d7318d6335-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The broad &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Tools/Performance/Scenarios/Intensive_JavaScript"&gt;article&lt;/a&gt; states that there are two available options: split intensive function into pieces and run every along with browser animation frames routine or use WebWorkers. As the &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers"&gt;MDN article&lt;/a&gt; says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The worker thread can perform tasks without interfering with the user interface.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I should try the approach, but later, when all bugs will be fixed and the game will be ready.
And I've found another option - &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API/Using_the_Web_Animations_API"&gt;Web Animation API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I've implemented it as reinitialization of the whole application - the same routine which is called once an app starts. But here I've encountered another problem - multiple event handler calls and it escalates with each actual trigger. Looks like I add more and more identical handlers with each restart.&lt;/p&gt;
&lt;p&gt;I've solved it by light reengineering the code: I don't need to reinitialize the whole app on reset, just draw the clear board and add all event listeners;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>freeCodeCamp</category><category>javascript</category><guid>https://al1s.github.io/posts/plan-and-done-for-february-19-2018/</guid><pubDate>Mon, 19 Feb 2018 16:30:31 GMT</pubDate></item><item><title>Plan and done for February-05-2018</title><link>https://al1s.github.io/posts/plan-and-done-for-february-05-2018/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-will-i-learn-today"&gt;
&lt;h2&gt;What will I learn today?&lt;/h2&gt;
&lt;p&gt;FreeCodeCamp projects: Weather - fix error with unreacheble host for ip resolution; Pomodoro - start coding.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="done"&gt;
&lt;h2&gt;Done&lt;/h2&gt;
&lt;div class="section" id="pomodoro-app"&gt;
&lt;h3&gt;Pomodoro app&lt;/h3&gt;
&lt;div class="section" id="challenges"&gt;
&lt;h4&gt;Challenges&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I want the UI be with a circular control element, but how to design &lt;code&gt;&amp;lt;input type='range'&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="solutions"&gt;
&lt;h4&gt;Solutions&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Angular-input to the rescue - &lt;a class="reference external" href="https://github.com/andrejewski/angle-input"&gt;https://github.com/andrejewski/angle-input&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Morphing play/pause button - &lt;a class="reference external" href="https://css-tricks.com/making-pure-css-playpause-button/"&gt;https://css-tricks.com/making-pure-css-playpause-button/&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Theming with CSS variables - &lt;a class="reference external" href="https://alligator.io/css/theming-custom-properties/"&gt;https://alligator.io/css/theming-custom-properties/&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>freeCodeCamp</category><category>javascript</category><guid>https://al1s.github.io/posts/plan-and-done-for-february-05-2018/</guid><pubDate>Mon, 05 Feb 2018 12:03:31 GMT</pubDate></item><item><title>Plan and done for January-29-2018</title><link>https://al1s.github.io/posts/plan-and-done-for-january-29-2018/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-will-i-learn-today"&gt;
&lt;h2&gt;What will I learn today?&lt;/h2&gt;
&lt;p&gt;FreeCodeCamp projects: Weather - fix error with unreacheble host for ip resolution; Pomodoro - start coding.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="done"&gt;
&lt;h2&gt;Done&lt;/h2&gt;
&lt;p&gt;While I was editing my application to the LEAP project I found that WeatherNow app stoped working on my laptop. After light research (developer tools -&amp;gt; console and network tabs) I found the reason. The resource I've used for retrieving geolocation data based on my IP-address started responding with error message.&lt;/p&gt;
&lt;p&gt;The first impulse was to replace current resource with another one. I checked for available resources and found a bunch here - &lt;a class="reference external" href="https://stackoverflow.com/a/35123097/2255031"&gt;https://stackoverflow.com/a/35123097/2255031&lt;/a&gt;. I payed attention to the list of resources which were available before but are down now. The most optimal and natural way is to add many resources to the app and then just request location from all of them and work with the first available. But how to get data from first successful promise resolved if we have multiple resources? Here is elegant solution from SO - &lt;a class="reference external" href="https://stackoverflow.com/a/37235274/2255031"&gt;https://stackoverflow.com/a/37235274/2255031&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_e409f9ccc5f74d8c82bb62335cedb442-1"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;oneSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;a name="rest_code_e409f9ccc5f74d8c82bb62335cedb442-2"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_e409f9ccc5f74d8c82bb62335cedb442-3"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// If a request fails, count that as a resolution so it will keep&lt;/span&gt;
&lt;a name="rest_code_e409f9ccc5f74d8c82bb62335cedb442-4"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// waiting for other possible successes. If a request succeeds,&lt;/span&gt;
&lt;a name="rest_code_e409f9ccc5f74d8c82bb62335cedb442-5"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// treat it as a rejection so Promise.all immediately bails out.&lt;/span&gt;
&lt;a name="rest_code_e409f9ccc5f74d8c82bb62335cedb442-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_e409f9ccc5f74d8c82bb62335cedb442-7"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_e409f9ccc5f74d8c82bb62335cedb442-8"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_e409f9ccc5f74d8c82bb62335cedb442-9"&gt;&lt;/a&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_e409f9ccc5f74d8c82bb62335cedb442-10"&gt;&lt;/a&gt;  &lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_e409f9ccc5f74d8c82bb62335cedb442-11"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// If '.all' resolved, we've just got an array of errors.&lt;/span&gt;
&lt;a name="rest_code_e409f9ccc5f74d8c82bb62335cedb442-12"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_e409f9ccc5f74d8c82bb62335cedb442-13"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;// If '.all' rejected, we've got the result we wanted.&lt;/span&gt;
&lt;a name="rest_code_e409f9ccc5f74d8c82bb62335cedb442-14"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_e409f9ccc5f74d8c82bb62335cedb442-15"&gt;&lt;/a&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_e409f9ccc5f74d8c82bb62335cedb442-16"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>freeCodeCamp</category><category>javascript</category><guid>https://al1s.github.io/posts/plan-and-done-for-january-29-2018/</guid><pubDate>Mon, 29 Jan 2018 12:03:31 GMT</pubDate></item><item><title>Plan and done for January-28-2018</title><link>https://al1s.github.io/posts/plan-and-done-for-january-28-2018/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-will-i-learn-today"&gt;
&lt;h2&gt;What will I learn today?&lt;/h2&gt;
&lt;p&gt;Application to Microsoft LEAP program.
FreeCodeCamp project: Pomodoro.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="done"&gt;
&lt;h2&gt;Done&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Unrelated&lt;/strong&gt; How to copy any file content to clipboard in MacOS:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cat filename | pbcopy
&lt;/pre&gt;
&lt;div class="section" id="why-are-you-interested-in-programming"&gt;
&lt;h3&gt;Why are you interested in programming?&lt;/h3&gt;
&lt;p&gt;Improving and optimization are my core values and I always seek for ways to make things work better, more smooth, more steady, being more reliable. On the other hand, programming is the fastest way to interact with "reality" in a creative way, even if such reality is totally constructed. This form of authoring "reality" is like the digital photography - you got the picture exactly at the time when it was taken and always have a freedom to immediately continue your work to get the result you want. And the whole structure of a software implementation consists of the steps of continuous approvement and optimization: you prototype, create the first approach, think what could work better or could be implemented in a more efficient way.&lt;/p&gt;
&lt;p&gt;Programming is like possessing a supernatural power of creating your own tools to test how the constructed "reality" works. Moreover, now I see the code as the means by which we can optimize, tweak the reality around us to be sometimes more exciting, sometimes more supportive, more encouraging for new ways of thinking and exploration.&lt;/p&gt;
&lt;p&gt;I hardly tolerate unfinished tasks and in coding, I know there are always ways to finish the work in the way which is appropriate for me. If I work on my personal project it's always the matter of my own learning capacity and it lays in a circle of my personal responsibility. It's my work to design and implement a solution in my own unique way.&lt;/p&gt;
&lt;p&gt;If we switch to a teamwork there are distinct parts of the code I'm responsible for. I'm a visual thinker and I adore to draw boxes and connect them with arrows. I like to create a visual representation of data and execution flows of a code. It helps me better understand what's going on inside an app or how to organize flows more efficiently. And it let me illustrate my ideas and present them to my team in the most expressive way. Add here a communicative function of a code and we've got the most effective way to share thoughts with the people who think alike and to get a feedback to learn what could be improved.&lt;/p&gt;
&lt;p&gt;In high school, I was interested in computers and principles behind them working. At my last workplace, I was responsible for providing stable and efficient work of fintech's back-office and implementation of settlement modules under the company's projects. I've been devoted to the gradual improvement of surrounding world since my school years, and programming gives me the freedom and opportunity to keep going on this path.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-have-you-done-to-expose-yourself-to-programming-so-far"&gt;
&lt;h3&gt;What have you done to expose yourself to programming so far?&lt;/h3&gt;
&lt;p&gt;I worked with all kinds of data handling for the last 10 years - generation, transformation, routing - in different roles for a fintech company. I worked as a data engineer, a database application developer, a team-lead and for the last couple of years as a project manager and a solution architect. I used to work with multimillion transaction datasets providing financial and informational reports, revealing patterns of customer behavior and presenting data flows and processing cycles on real-time dashboards. And all my job activities were done by using different kinds of programming languages: I used SQL to communicate with Oracle or MS SQL Server to transform and extract data for reports; Python with cluster analysis to form customers groups; SQL, shell-scripts, and JavaScript/.NET to present data on dashboards.&lt;/p&gt;
&lt;p&gt;I've got training experience both as an author of training materials and as an instructor for new employees and internal teams. I established a company's knowledge base as a single starting point of entry to get acquaintance with terms and technology stack in use. And this role included creating documentation for the in-house software modules and procedures.&lt;/p&gt;
&lt;p&gt;A couple of years ago I spent some time to get accustomed to machine learning toolkits. I finished an online certification and started to use ML tools for prototyping side project for monitoring customer loyalty level.&lt;/p&gt;
&lt;p&gt;For the last year, I switched from a data engineering to a software development and specifically to a web development. I've been studying and practicing HTML, CSS, and Javascript. I've started following the freeCodeCamp curriculum and despite I work on two jobs and raise three daughters I spend the remaining time implementing projects, watching online courses and practicing algorithms and data structures. In the year my coding expressiveness increased tangibly - I started using code patterns and practicing functional programming approach.&lt;/p&gt;
&lt;p&gt;Projects - technologies:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://al1s.github.io/Futurismo/"&gt;https://al1s.github.io/Futurismo/&lt;/a&gt; - A poster with rich typography implemented with CSS Flexbox.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://al1s.github.io/Jazz/"&gt;https://al1s.github.io/Jazz/&lt;/a&gt; - Another poster with CSS Flexbox for 2D layer positioning.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://al1s.github.io/sedona/"&gt;https://al1s.github.io/sedona/&lt;/a&gt; - Learning project of a landing page. Gulp workflow, SASS preprocessor, JQuery.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://al1s.github.io/WeatherNow/"&gt;https://al1s.github.io/WeatherNow/&lt;/a&gt; - Learning project to retrieve local weather. JS, Gulp.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://al1s.github.io/AskWiki/"&gt;https://al1s.github.io/AskWiki/&lt;/a&gt; - Learning project of a single page interface to the Wikipedia search engine. JS, Gulp.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://al1s.github.io/Calculator/"&gt;https://al1s.github.io/Calculator/&lt;/a&gt; - Learning project - simple calculator. JS, Gulp.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://codepen.io/alstof/full/xPdLKX/"&gt;https://codepen.io/alstof/full/xPdLKX/&lt;/a&gt; - Learning project - status page for choosen Twitch.TV streams.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Certification:
Coursera Machine Learning, &lt;a class="reference external" href="https://www.coursera.org/account/accomplishments/verify/MBJY4S7WH9H5"&gt;https://www.coursera.org/account/accomplishments/verify/MBJY4S7WH9H5&lt;/a&gt;
Coursera Introduction into machine learning, &lt;a class="reference external" href="https://www.coursera.org/account/accomplishments/verify/BWPNGQ6TEG58"&gt;https://www.coursera.org/account/accomplishments/verify/BWPNGQ6TEG58&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>freeCodeCamp</category><category>javascript</category><guid>https://al1s.github.io/posts/plan-and-done-for-january-28-2018/</guid><pubDate>Sun, 28 Jan 2018 12:48:31 GMT</pubDate></item><item><title>Plan and done for January-21-2018</title><link>https://al1s.github.io/posts/plan-and-done-for-january-21-2018/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-will-i-learn-today"&gt;
&lt;h2&gt;What will I learn today?&lt;/h2&gt;
&lt;p&gt;FreeCodeCamp project: Calculator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="done"&gt;
&lt;h2&gt;Done&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;To invoke numeric keyboard on mobile we need:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;input type="tel" /&amp;gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And &lt;code&gt;type="number"&lt;/code&gt; gives numeric keyboard too, but without symbols for arithmetic operations.&lt;/p&gt;
&lt;ol class="arabic" start="2"&gt;
&lt;li&gt;&lt;p class="first"&gt;Tried to implement insertion of digits into &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; with &lt;code&gt;execCommand('insertText', ...)&lt;/code&gt; but it seems doesn't work in FF (v57.0.4). Found old working code on SO - &lt;a class="reference external" href="https://stackoverflow.com/a/1064139"&gt;https://stackoverflow.com/a/1064139&lt;/a&gt;. It has separate routes for old IE &amp;lt; 9.0 and modern browsers, and the way to put elements in text field is to manually cut and then concatenate text in the field. Had some troubles with inability to put cursor at the end of the whole text after insertion but found it was due sending number primitive into the function instead of string.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;To turn off virtual keyboard on mobile we may use HTML5 &lt;code&gt;readonly&lt;/code&gt; property for &lt;code&gt;input&lt;/code&gt; - &lt;a class="reference external" href="https://codepen.io/agorilla/pen/FJIic"&gt;https://codepen.io/agorilla/pen/FJIic&lt;/a&gt;. But it makes impossible to control calculator using real keyboard. How to detect activation of the &lt;code&gt;input&lt;/code&gt; field by user? By intercepting &lt;cite&gt;click&lt;/cite&gt; mouse event. And to route &lt;code&gt;click&lt;/code&gt; and &lt;code&gt;touchend&lt;/code&gt; events differently inside a handler.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;How to set one handler for multiple events? &lt;code&gt;['click', 'touchend'].forEach(e =&amp;gt; document.addEventListener(e, handlerFunc);&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Add vibration for pressing virtual keys on mobile:&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_79cb7cd1753f4753a5cfb455c2ea97fc-1"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;vibrateOnTouch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_79cb7cd1753f4753a5cfb455c2ea97fc-2"&gt;&lt;/a&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'vibrate'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_79cb7cd1753f4753a5cfb455c2ea97fc-3"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vibrate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;a name="rest_code_79cb7cd1753f4753a5cfb455c2ea97fc-4"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vibrate&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
&lt;a name="rest_code_79cb7cd1753f4753a5cfb455c2ea97fc-5"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webkitVibrate&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
&lt;a name="rest_code_79cb7cd1753f4753a5cfb455c2ea97fc-6"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mozVibrate&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
&lt;a name="rest_code_79cb7cd1753f4753a5cfb455c2ea97fc-7"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msVibrate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_79cb7cd1753f4753a5cfb455c2ea97fc-8"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vibrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_79cb7cd1753f4753a5cfb455c2ea97fc-9"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_79cb7cd1753f4753a5cfb455c2ea97fc-10"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I applied Kyle Simpson's OLOO pattern by separating data processing and UI into different objects and then creating and invoking application as a combination of those two. Feels clearer than mashup of both into one peace of code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;As a start point for UI I've choosen keybord JQuery plugin - &lt;a class="reference external" href="https://github.com/Mottie/Keyboard/blob/master/js/jquery.keyboard.js"&gt;https://github.com/Mottie/Keyboard/blob/master/js/jquery.keyboard.js&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Almost perfection - &lt;a class="reference external" href="https://web2.0calc.com/"&gt;https://web2.0calc.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>freeCodeCamp</category><category>javascript</category><guid>https://al1s.github.io/posts/plan-and-done-for-january-21-2018/</guid><pubDate>Sun, 21 Jan 2018 14:31:31 GMT</pubDate></item><item><title>Plan and done for November-08-2017</title><link>https://al1s.github.io/posts/plan-and-done-for-november-08-2017/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-will-i-learn-today"&gt;
&lt;h2&gt;What will I learn today?&lt;/h2&gt;
&lt;p&gt;FreeCodeCamp curriculum: No repeat please.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="done"&gt;
&lt;h2&gt;Done&lt;/h2&gt;
&lt;p&gt;Permutations and combinations. There are bunch of algorithms to construct permutations. I've tried Heap recursive, Heap iterative and Steinhaus-Johnson-Trotter. The code for each is here - &lt;a class="reference external" href="https://codepen.io/alstof/pen/jarvNx"&gt;https://codepen.io/alstof/pen/jarvNx&lt;/a&gt;. Couldn't get grounded intuition behind Heap algo: the reason it works - it has a pattern of elements swapping, but it's very easy to implement:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_cdbfb4370cb6471eab262621c6e8474b-1"&gt;&lt;/a&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;heapPermute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cdbfb4370cb6471eab262621c6e8474b-2"&gt;&lt;/a&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;swap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pos1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pos2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pos1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pos2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pos2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pos1&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
&lt;a name="rest_code_cdbfb4370cb6471eab262621c6e8474b-3"&gt;&lt;/a&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;a name="rest_code_cdbfb4370cb6471eab262621c6e8474b-4"&gt;&lt;/a&gt;  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cdbfb4370cb6471eab262621c6e8474b-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cdbfb4370cb6471eab262621c6e8474b-6"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;heapPermute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_cdbfb4370cb6471eab262621c6e8474b-7"&gt;&lt;/a&gt;      &lt;span class="nx"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_cdbfb4370cb6471eab262621c6e8474b-8"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_cdbfb4370cb6471eab262621c6e8474b-9"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;heapPermute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_cdbfb4370cb6471eab262621c6e8474b-10"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_cdbfb4370cb6471eab262621c6e8474b-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;SJT looks a little more complicated, but it has more sense for me - just build the whole pyramid from scratch - starting with permutation of 1, 2, 3 ... elements and add every next element to what you've already got in every porision from last to first for every odd element of previous permutation and first to last for every even one.&lt;/p&gt;
&lt;p&gt;Good source of explanation is Khan Academy - &lt;a class="reference external" href="https://www.khanacademy.org/math/precalculus/prob-comb/combinatorics-precalc/v/factorial-and-counting-seat-arrangements"&gt;https://www.khanacademy.org/math/precalculus/prob-comb/combinatorics-precalc/v/factorial-and-counting-seat-arrangements&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pictures with explanation are available at Wiki:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Heap - &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Heap%27s_algorithm"&gt;https://en.wikipedia.org/wiki/Heap%27s_algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SJT - &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Steinhaus%E2%80%93Johnson%E2%80%93Trotter_algorithm"&gt;https://en.wikipedia.org/wiki/Steinhaus%E2%80%93Johnson%E2%80%93Trotter_algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>freeCodeCamp</category><category>javascript</category><guid>https://al1s.github.io/posts/plan-and-done-for-november-08-2017/</guid><pubDate>Wed, 08 Nov 2017 22:32:31 GMT</pubDate></item><item><title>Plan and done for September-17-2017</title><link>https://al1s.github.io/posts/plan-and-done-for-september-17-2017/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-will-i-learn-today"&gt;
&lt;h2&gt;What will I learn today?&lt;/h2&gt;
&lt;p&gt;FreeCodeCamp project: Wikipedia viewer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="done"&gt;
&lt;h2&gt;Done&lt;/h2&gt;
&lt;p&gt;Trasforming search bar is implemented. Here is a pen on Codepen - &lt;a class="reference external" href="https://codepen.io/alstof/pen/yzNdKj"&gt;https://codepen.io/alstof/pen/yzNdKj&lt;/a&gt;, here is a stand-alone page - &lt;a class="reference external" href="https://al1s.github.io/AskWiki/"&gt;https://al1s.github.io/AskWiki/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Besides there was a todo list:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;fix address bar - remove submit parameters from it;&lt;/li&gt;
&lt;li&gt;clear the page if the input value is undefined;&lt;/li&gt;
&lt;li&gt;speed up loading and displaying data;&lt;/li&gt;
&lt;li&gt;limit the keys to react to meaningful - letters and entry control;&lt;/li&gt;
&lt;li&gt;fix browser history: make backspace to return a user to the previous page;&lt;/li&gt;
&lt;li&gt;fix images size - it's too crane;&lt;/li&gt;
&lt;li&gt;show a message on no search results;&lt;/li&gt;
&lt;li&gt;make the page functional on iPad mini (Safari 7);&lt;/li&gt;
&lt;li&gt;deal with Promise object manipulation;&lt;/li&gt;
&lt;li&gt;how to get the page similar to Wiki's one on no data found;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="fix-browser-history"&gt;
&lt;h3&gt;Fix browser history&lt;/h3&gt;
&lt;p&gt;There is the &lt;code&gt;history&lt;/code&gt; object wich may be used to control browser behavior on back and forward buttons. Here is MDN article - &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/API/History_API"&gt;https://developer.mozilla.org/en-US/docs/Web/API/History_API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now the page restores previous search phrase on back and forward.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="show-a-message-when-there-are-no-results-returned"&gt;
&lt;h3&gt;Show a message when there are no results returned&lt;/h3&gt;
&lt;p&gt;Implemented custom error object based on &lt;a class="reference external" href="https://stackoverflow.com/a/5251506/2255031"&gt;https://stackoverflow.com/a/5251506/2255031&lt;/a&gt;. The reason was to get cutomized variables inside error object to pass it between functions. I'm not sure if it's correct coding style.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="promise-with-resolves-and-rejects"&gt;
&lt;h3&gt;Promise with resolves and rejects&lt;/h3&gt;
&lt;p&gt;I used promises in the code but the question left - how to return a value from a Promise: e.g. I've implemented common ajax request wrapper for fetch and it could be used as a call to get results but it didn't work when I tried to use it inside Promise.all function.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="special-search-results-when-nothing-found"&gt;
&lt;h3&gt;Special search results when nothing found&lt;/h3&gt;
&lt;p&gt;The Wiki returns special page on no data found result - Special:search. I haven't found it was mentioned anywhere in API docs or discussed as possible result on unsuccessful search. I've tried to retrieve the same page I have in a browser but got the CORS error that I treated such as the functionality wasn't implemented in a Wiki's public API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unlisted"&gt;
&lt;h3&gt;Unlisted&lt;/h3&gt;
&lt;p&gt;I like the way VS Code simulates Vim keyboard control scheme. Everything I used in pure Vim, I use now in VS Code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>freeCodeCamp</category><category>javascript</category><guid>https://al1s.github.io/posts/plan-and-done-for-september-17-2017/</guid><pubDate>Sun, 17 Sep 2017 12:22:31 GMT</pubDate></item></channel></rss>