<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Learn another day (Posts about web-dev)</title><link>https://al1s.github.io/</link><description></description><atom:link rel="self" type="application/rss+xml" href="https://al1s.github.io/categories/web-dev.xml"></atom:link><language>en</language><copyright>Contents © 2018 &lt;a href="mailto:alstof@gmail.com"&gt;alstof&lt;/a&gt; </copyright><lastBuildDate>Tue, 25 Sep 2018 12:40:29 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Plan and done for Sep-21-2018</title><link>https://al1s.github.io/posts/plan-and-done-for-sep-21-2018/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-did-we-do-well-that-if-we-dont-discuss-we-might-forget"&gt;
&lt;h2&gt;What did we do well, that if we don’t discuss we might forget?&lt;/h2&gt;
&lt;p&gt;Practiced in debugging Express &amp;lt;=&amp;gt; Postgres interaction;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-did-we-learn"&gt;
&lt;h2&gt;What did we learn?&lt;/h2&gt;
&lt;p&gt;Craft your database schema carefully not to be bitten by poor design later: we created the table with the unique constraint on author column and today were debugging insertion error for 20 minutes before found the reason why we can't add another book.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-should-we-do-differently-next-time"&gt;
&lt;h2&gt;What should we do differently next time?&lt;/h2&gt;
&lt;p&gt;Spend more time on styling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-still-puzzles-us-or-what-do-we-need-to-learn-more-about"&gt;
&lt;h2&gt;What still puzzles us, or what do we need to learn more about?&lt;/h2&gt;
&lt;p&gt;Best practices for creating a robust server with Node/Express/DB with input validation and unified error handling. Current state looks fragile.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>web-dev</category><guid>https://al1s.github.io/posts/plan-and-done-for-sep-21-2018/</guid><pubDate>Fri, 21 Sep 2018 20:06:14 GMT</pubDate></item><item><title>Plan and done for Sep-20-2018</title><link>https://al1s.github.io/posts/plan-and-done-for-sep-20-2018/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-did-we-do-well-that-if-we-dont-discuss-we-might-forget"&gt;
&lt;h2&gt;What did we do well, that if we don’t discuss we might forget?&lt;/h2&gt;
&lt;p&gt;Added validation and sanitizing by existing validator for Node.js&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-did-we-learn"&gt;
&lt;h2&gt;What did we learn?&lt;/h2&gt;
&lt;p&gt;Practiced using validator.js and handling errors on the server side.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-should-we-do-differently-next-time"&gt;
&lt;h2&gt;What should we do differently next time?&lt;/h2&gt;
&lt;p&gt;Spent more time on styling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-still-puzzles-us-or-what-do-we-need-to-learn-more-about"&gt;
&lt;h2&gt;What still puzzles us, or what do we need to learn more about?&lt;/h2&gt;
&lt;p&gt;Error handling and best practices in it.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>web-dev</category><guid>https://al1s.github.io/posts/plan-and-done-for-sep-20-2018/</guid><pubDate>Thu, 20 Sep 2018 18:22:14 GMT</pubDate></item><item><title>Plan and done for Sep-19-2018</title><link>https://al1s.github.io/posts/plan-and-done-for-sep-19-2018/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="c"&gt;
&lt;h2&gt;C#&lt;/h2&gt;
&lt;p&gt;I've started practicing basic C# fluency by taking small assessments on CodeWars. The first logistical question I've got - how to setup a test env for C# projects? My steps (based on many sources but primarily on &lt;a class="reference external" href="https://docs.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-dotnet-test"&gt;MS dotnet Core guide&lt;/a&gt;) include:&lt;/p&gt;
&lt;p&gt;Packages to install (with &lt;code&gt;dotnet add package PackageName&lt;/code&gt;):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;NUnit;&lt;/li&gt;
&lt;li&gt;NUnit.Console;&lt;/li&gt;
&lt;li&gt;NUnit.ConsoleRunner;&lt;/li&gt;
&lt;li&gt;NUnit.Runners;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Folders/files setup:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;start a project: &lt;code&gt;dotnet new console -o "MyAppName"&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;initialize a solution &lt;code&gt;cd MyAppName; dotnet new sln&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;initialize a main project &lt;code&gt;mkdir ProjectName; cd ProjectName; dotnet new classLib&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;add the main project to the solution &lt;code&gt;cd ..; dotnet sln add ./ProjectName/ProjectName.csproj&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;initialize a test project &lt;code&gt;mkdir ProjectName.Tests; cd ProjectName.Tests; dotnet new nunit&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;add reference to the main project &lt;code&gt;dotnet add reference ../ProjectName/ProjectName.csproj&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;add the test project to the solution &lt;code&gt;cd ..; dotnet sln add ./ProjectName.Tests/ProjectName.Tests.csproj&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;VSCode extension - .NET Core Test Explorer&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="retro-about"&gt;
&lt;h2&gt;Retro about&lt;/h2&gt;
&lt;div class="section" id="what-did-we-do-well-that-if-we-dont-discuss-we-might-forget"&gt;
&lt;h3&gt;What did we do well, that if we don’t discuss we might forget?&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="what-did-we-learn"&gt;
&lt;h3&gt;What did we learn?&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="what-should-we-do-differently-next-time"&gt;
&lt;h3&gt;What should we do differently next time?&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="what-still-puzzles-us-or-what-do-we-need-to-learn-more-about"&gt;
&lt;h3&gt;What still puzzles us, or what do we need to learn more about?&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>c#</category><category>web-dev</category><guid>https://al1s.github.io/posts/plan-and-done-for-sep-19-2018/</guid><pubDate>Wed, 19 Sep 2018 13:10:14 GMT</pubDate></item><item><title>Plan and done for Sep-18-2018</title><link>https://al1s.github.io/posts/plan-and-done-for-sep-18-2018/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-did-we-do-well-that-if-we-dont-discuss-we-might-forget"&gt;
&lt;h2&gt;What did we do well, that if we don’t discuss we might forget?&lt;/h2&gt;
&lt;p&gt;We've moved through the plan step by step and implemented everything that was required. The progress is visible and accomplishment seems tangible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-did-we-learn"&gt;
&lt;h2&gt;What did we learn?&lt;/h2&gt;
&lt;p&gt;Use EJS and Express error handling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-should-we-do-differently-next-time"&gt;
&lt;h2&gt;What should we do differently next time?&lt;/h2&gt;
&lt;p&gt;Delegate more work to Danul..?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-still-puzzles-us-or-what-do-we-need-to-learn-more-about"&gt;
&lt;h2&gt;What still puzzles us, or what do we need to learn more about?&lt;/h2&gt;
&lt;p&gt;How to combine rendering on a server with rendering on user-side. I mean - how to add React for example to pages, rendered initially on a server.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>web-dev</category><guid>https://al1s.github.io/posts/plan-and-done-for-sep-18-2018/</guid><pubDate>Tue, 18 Sep 2018 19:31:14 GMT</pubDate></item><item><title>Plan and done for Sep-17-2018</title><link>https://al1s.github.io/posts/plan-and-done-for-sep-17-2018/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-did-we-do-well-that-if-we-dont-discuss-we-might-forget"&gt;
&lt;h2&gt;What did we do well, that if we don’t discuss we might forget?&lt;/h2&gt;
&lt;p&gt;Accomplished everything that was possible (except select-option tags) with just CSS. Sprites are still a pain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-did-we-learn"&gt;
&lt;h2&gt;What did we learn?&lt;/h2&gt;
&lt;p&gt;Practice CSS and form styling. Learned basic input validation using CSS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-should-we-do-differently-next-time"&gt;
&lt;h2&gt;What should we do differently next time?&lt;/h2&gt;
&lt;p&gt;Plan first! Then work according to the plan step by step.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-still-puzzles-us-or-what-do-we-need-to-learn-more-about"&gt;
&lt;h2&gt;What still puzzles us, or what do we need to learn more about?&lt;/h2&gt;
&lt;p&gt;As I've got we can't style &lt;code&gt;option&lt;/code&gt; tag. Adding javascript just to deal with the element's style seems unreasonable.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>web-dev</category><guid>https://al1s.github.io/posts/plan-and-done-for-sep-17-2018/</guid><pubDate>Mon, 17 Sep 2018 19:47:14 GMT</pubDate></item><item><title>Plan and done for Sep-14-2018</title><link>https://al1s.github.io/posts/plan-and-done-for-sep-14-2018/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-did-we-do-well-that-if-we-dont-discuss-we-might-forget"&gt;
&lt;h2&gt;What did we do well, that if we don’t discuss we might forget?&lt;/h2&gt;
&lt;p&gt;It was a pleasure to work with Jeff - he grasps different concepts and ideas very fast and always ready for more adventures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-did-we-learn"&gt;
&lt;h2&gt;What did we learn?&lt;/h2&gt;
&lt;p&gt;Practiced promises, mentoring.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-should-we-do-differently-next-time"&gt;
&lt;h2&gt;What should we do differently next time?&lt;/h2&gt;
&lt;p&gt;Work together on a bigger project?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-still-puzzles-us-or-what-do-we-need-to-learn-more-about"&gt;
&lt;h2&gt;What still puzzles us, or what do we need to learn more about?&lt;/h2&gt;
&lt;p&gt;How to conduct SQL injection on the blog (we didn't sanitize the user input).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>web-dev</category><guid>https://al1s.github.io/posts/plan-and-done-for-sep-14-2018/</guid><pubDate>Fri, 14 Sep 2018 20:28:14 GMT</pubDate></item><item><title>Plan and done for Sep-13-2018</title><link>https://al1s.github.io/posts/plan-and-done-for-sep-13-2018/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-did-we-do-well-that-if-we-dont-discuss-we-might-forget"&gt;
&lt;h2&gt;What did we do well, that if we don’t discuss we might forget?&lt;/h2&gt;
&lt;p&gt;We talked a lot. We switched not so often. Databases in conjunction with web-servers are hard to grasp in a short period of time, so my team definitely needed some additional visual explanations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-did-we-learn"&gt;
&lt;h2&gt;What did we learn?&lt;/h2&gt;
&lt;p&gt;Practiced to explain things in digestible parts visualizing flows between Browser-WebServer-DB.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-should-we-do-differently-next-time"&gt;
&lt;h2&gt;What should we do differently next time?&lt;/h2&gt;
&lt;p&gt;Switch more often.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-still-puzzles-us-or-what-do-we-need-to-learn-more-about"&gt;
&lt;h2&gt;What still puzzles us, or what do we need to learn more about?&lt;/h2&gt;
&lt;p&gt;My team struggles with all the flows and vocabulary about requests/responses/POST/GET.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>web-dev</category><guid>https://al1s.github.io/posts/plan-and-done-for-sep-13-2018/</guid><pubDate>Thu, 13 Sep 2018 18:56:14 GMT</pubDate></item><item><title>Plan and done for Sep-12-2018</title><link>https://al1s.github.io/posts/plan-and-done-for-sep-12-2018/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-did-we-do-well-that-if-we-dont-discuss-we-might-forget"&gt;
&lt;h2&gt;What did we do well, that if we don’t discuss we might forget?&lt;/h2&gt;
&lt;p&gt;We accomplished the tasks given in quite short period and find only two things which required some research. One of them - how to implement 404 error handler. The way we have it implemented - by some 'anything else goes' - seems weird 'cause handling errors and routing are different behavior. We need some middleware to implement this handler.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-did-we-learn"&gt;
&lt;h2&gt;What did we learn?&lt;/h2&gt;
&lt;p&gt;We've learned that the routes in &lt;cite&gt;express.static&lt;/cite&gt; routes are relative, but in &lt;cite&gt;get&lt;/cite&gt; they are absolute. That's why we need to setup them with &lt;cite&gt;__dirname&lt;/cite&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-should-we-do-differently-next-time"&gt;
&lt;h2&gt;What should we do differently next time?&lt;/h2&gt;
&lt;p&gt;Switch between roles earlier, maybe every 15 minutes?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-still-puzzles-us-or-what-do-we-need-to-learn-more-about"&gt;
&lt;h2&gt;What still puzzles us, or what do we need to learn more about?&lt;/h2&gt;
&lt;p&gt;How to correctly implement 404 handler.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>web-dev</category><guid>https://al1s.github.io/posts/plan-and-done-for-sep-12-2018/</guid><pubDate>Wed, 12 Sep 2018 18:46:14 GMT</pubDate></item><item><title>Plan and done for Aug-24-2018</title><link>https://al1s.github.io/posts/plan-and-done-for-aug-24-2018/</link><dc:creator>alstof</dc:creator><description>&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Implement a carousel for pictures.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;number of libraries and approaches is overwhelming;&lt;/li&gt;
&lt;li&gt;pure JS (aka vanilla JS) requires a lot of routine work;&lt;/li&gt;
&lt;li&gt;existing libraries vary in sizes and functionality - from tens to hundreds of kb, from one kind of carousels to tens different;&lt;/li&gt;
&lt;li&gt;some of them are ghosts despite thousands of stars on the Github;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Gather photos and descriptions.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;it's exhaustive if you use many sources with different licensing requirements;&lt;/li&gt;
&lt;li&gt;you have to check what each license asks for: how the subject could be used and what the attribution should be like;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Deal with transfer of data between pages.
The user can interact with pages by:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;following links;&lt;/li&gt;
&lt;li&gt;clicking buttons;&lt;/li&gt;
&lt;li&gt;pressing "Back" and "Forward" buttons in browser;&lt;/li&gt;
&lt;li&gt;reloading a page;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of the interactions should be handled appropriately and the data in localStorage should be actualized accordingly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;An SVG is great for web but what about developers?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;steep learning path;&lt;/li&gt;
&lt;li&gt;at list four different ways to include it in the page;&lt;/li&gt;
&lt;li&gt;each of the these ways has its own advantages and drawbacks;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Vertical scrollbar&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;fight it with &lt;code&gt;overflow: hidden&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;but what if the whole page overflow the screen?&lt;/li&gt;
&lt;li&gt;what if you want to work with a one css file and have scrollbar on other pages?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Deal with :code: &lt;cite&gt;&amp;lt;textarea&amp;gt;&lt;/cite&gt; positioning&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;lt;textarea&amp;gt; is a replaced element, like an image, so...&lt;/li&gt;
&lt;li&gt;it's an inline block aligned to text bottom line.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Responsiveness&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Crave the space on mobile.&lt;/li&gt;
&lt;li&gt;Make photos' size friendly for mobile.&lt;/li&gt;
&lt;li&gt;Make an app accessible for different types of users.&lt;ul&gt;
&lt;li&gt;in terms of human interaction - accessible for screenreaders; with enough contrast for text; controllable by keyboard;&lt;/li&gt;
&lt;li&gt;In terms of different platforms - Firefox, Chrome, Edge, IE, Opera, Safari, Mobile stuff;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><category>web-dev</category><guid>https://al1s.github.io/posts/plan-and-done-for-aug-24-2018/</guid><pubDate>Fri, 24 Aug 2018 14:02:14 GMT</pubDate></item><item><title>Plan and done for August-17-2018</title><link>https://al1s.github.io/posts/plan-and-done-for-august-17-2018/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-will-i-learn-today"&gt;
&lt;h2&gt;What will I learn today?&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Practicing Javascript, git and workflow at CodeFellow.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="done"&gt;
&lt;h2&gt;Done&lt;/h2&gt;
&lt;p&gt;We have another final project idea: it's a site for tourists of Seattle with a main page, where you see only a bunch of photos of different tourists attrations. You can roll it (like a grand spinning wheel) in different ways (swipe on mobile?) depending on your platform and get a random photo. If it's something interesting - the user can click on it and get the more visual and text info about the place with a link to (or an actual) google maps. Another functionality is to let user keep and her notes about the place.&lt;/p&gt;
&lt;p&gt;Product name: Tourist Roulette&lt;/p&gt;
&lt;p&gt;User stories:&lt;/p&gt;
&lt;p&gt;As a user, I want an app to provide me with tourist attractions in Seattle, so that I could choose where I want to go next on route.&lt;/p&gt;
&lt;p&gt;As a user, I want to be provided with a randomly picked place, so that I always have a choice without any efforts.&lt;/p&gt;
&lt;p&gt;As a user, I want to have an ability to get some details about a chosen place, so that I could decide whether I'm interested in it or not.&lt;/p&gt;
&lt;p&gt;As a user, I want to have an ability to get the place position on a map, so that I could plan my trip in details.&lt;/p&gt;
&lt;p&gt;As a user, I want to have an ability to leave my private notes on attraction I've attended, so that I could later share them with my friends.&lt;/p&gt;
&lt;p&gt;As a hiring manager, I want to know about the guys who created the app, so that I could assess their skill set and get an expression of their abilities.&lt;/p&gt;
&lt;p&gt;As a developer, I want to face a challenging task, so that I could feel the pleasure of accomplishment when I would overcome the challenge.&lt;/p&gt;
&lt;p&gt;## Stretch goals&lt;/p&gt;
&lt;p&gt;As a user, I want all the features to be presented in a game form, so that it was fun to use the app.&lt;/p&gt;
&lt;p&gt;As a user, I want to see current weather conditions in Seattle, so that I could plan my trip with all information available.&lt;/p&gt;
&lt;p&gt;As a user, I want to see how far the chosen place is from my current location, so that I can decide whether to go there or to find something closer.&lt;/p&gt;
&lt;p&gt;As a user, I want to be able to share my impressions about the place I've visited immediately into all well known platforms, so that I could spend less time to open and publish into each app separately.&lt;/p&gt;
&lt;p&gt;MVP&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The user can get a random picture of the tourist's place in Seattle on the main page.&lt;/li&gt;
&lt;li&gt;The user can click (touch) on it and get the page with a description, additional photos and a google maps link.&lt;/li&gt;
&lt;li&gt;The user can get&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stretch goals:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;to make it roll&lt;/li&gt;
&lt;li&gt;Google map attached to each page about a place.&lt;/li&gt;
&lt;li&gt;Ability to edit/print/save to file.&lt;/li&gt;
&lt;li&gt;A scheduler to make a planning and set notifications.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What should we author?&lt;/p&gt;
&lt;p&gt;CSS classes hierarchy
Shareable data objects format&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Code201</category><category>Code Fellows</category><category>Final project</category><category>JS</category><category>web-dev</category><guid>https://al1s.github.io/posts/plan-and-done-for-august-17-2018/</guid><pubDate>Fri, 17 Aug 2018 22:30:31 GMT</pubDate></item></channel></rss>