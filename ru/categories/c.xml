<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Learn another day (Записи о c#)</title><link>https://al1s.github.io/</link><description></description><atom:link type="application/rss+xml" href="https://al1s.github.io/ru/categories/c.xml" rel="self"></atom:link><language>ru</language><copyright>Contents © 2018 &lt;a href="mailto:alstof@gmail.com"&gt;alstof&lt;/a&gt; </copyright><lastBuildDate>Sun, 07 Oct 2018 18:18:41 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Plan and done for Oct-06-2018</title><link>https://al1s.github.io/ru/posts/plan-and-done-for-oct-06-2018/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="what-will-i-learn-today"&gt;
&lt;h2&gt;What will I learn today?&lt;/h2&gt;
&lt;p&gt;Keep solving and submitting CodeWars assignments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="done"&gt;
&lt;h2&gt;Done&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.codewars.com/kata/reverse-or-rotate/train/csharp"&gt;Solved reverse or rotate&lt;/a&gt; assignment and the most interesting as always - what is considered as best practice and clever solution by other members. The &lt;a class="reference external" href="http://www.codewars.com/kata/reviews/56b5b65783df365700000091/groups/578b6a9384ac69f8110000be"&gt;give solution&lt;/a&gt; is definitely clever and declarative (I strive to be as declarative as I can) and I've learned some stuff from it.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Dividing integer by integer in C# you'll get an integer and never a float/double/decimal. No decimal delimiter! Never. No need for &lt;code&gt;Math.round&lt;/code&gt; or &lt;code&gt;Math.floor&lt;/code&gt;. Short &lt;a class="reference external" href="https://stackoverflow.com/a/10851437"&gt;SO explanation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;There is an &lt;code&gt;Enumerable.Range()&lt;/code&gt;. It works almost like &lt;code&gt;range()&lt;/code&gt; in Python: &lt;code&gt;string.Join(",", Enumerable.Range(1,5))&lt;/code&gt; will produce &lt;cite&gt;"1,2,3,4,5"&lt;/cite&gt;. Almost like Python but not exactly because in Python the upper bound isn't included in the result, and we have additional method overload with a third parameter as step for generating the sequence.&lt;/li&gt;
&lt;li&gt;There are two versions of &lt;code&gt;Reverse()&lt;/code&gt; method: one is for &lt;code&gt;List&lt;/code&gt; collection, another is for objects with &lt;code&gt;IEnumerable&lt;/code&gt; implemented. First is in place, second returns &lt;code&gt;IEnumerable&lt;/code&gt; compatible. The reasons are historical. For strings we can use both, but the second seems more declarative.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code C#"&gt;&lt;a name="rest_code_3f324b54f68047e0ac601d2aaf83030f-1"&gt;&lt;/a&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;charArray&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToCharArray&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;a name="rest_code_3f324b54f68047e0ac601d2aaf83030f-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;charArray&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_3f324b54f68047e0ac601d2aaf83030f-3"&gt;&lt;/a&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;charArray&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code C#"&gt;&lt;a name="rest_code_b0e55f100b6e40df955e6109d11ca9c4-1"&gt;&lt;/a&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reverse&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://al1s.github.io/ru/posts/plan-and-done-for-oct-06-2018/</guid><pubDate>Sat, 06 Oct 2018 18:37:14 GMT</pubDate></item><item><title>Plan and done for Sep-19-2018</title><link>https://al1s.github.io/ru/posts/plan-and-done-for-sep-19-2018/</link><dc:creator>alstof</dc:creator><description>&lt;div&gt;&lt;div class="section" id="c"&gt;
&lt;h2&gt;C#&lt;/h2&gt;
&lt;p&gt;I've started practicing basic C# fluency by taking small assessments on CodeWars. The first logistical question I've got - how to setup a test env for C# projects? My steps (based on many sources but primarily on &lt;a class="reference external" href="https://docs.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-dotnet-test"&gt;MS dotnet Core guide&lt;/a&gt;) include:&lt;/p&gt;
&lt;p&gt;Packages to install (with &lt;code&gt;dotnet add package PackageName&lt;/code&gt;):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;NUnit;&lt;/li&gt;
&lt;li&gt;NUnit.Console;&lt;/li&gt;
&lt;li&gt;NUnit.ConsoleRunner;&lt;/li&gt;
&lt;li&gt;NUnit.Runners;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Folders/files setup:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;start a project: &lt;code&gt;dotnet new console -o "MyAppName"&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;initialize a solution &lt;code&gt;cd MyAppName; dotnet new sln&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;initialize a main project &lt;code&gt;mkdir ProjectName; cd ProjectName; dotnet new classLib&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;add the main project to the solution &lt;code&gt;cd ..; dotnet sln add ./ProjectName/ProjectName.csproj&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;initialize a test project &lt;code&gt;mkdir ProjectName.Tests; cd ProjectName.Tests; dotnet new nunit&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;add reference to the main project &lt;code&gt;dotnet add reference ../ProjectName/ProjectName.csproj&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;add the test project to the solution &lt;code&gt;cd ..; dotnet sln add ./ProjectName.Tests/ProjectName.Tests.csproj&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;VSCode extension - .NET Core Test Explorer&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="retro-about"&gt;
&lt;h2&gt;Retro about&lt;/h2&gt;
&lt;div class="section" id="what-did-we-do-well-that-if-we-dont-discuss-we-might-forget"&gt;
&lt;h3&gt;What did we do well, that if we don’t discuss we might forget?&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="what-did-we-learn"&gt;
&lt;h3&gt;What did we learn?&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="what-should-we-do-differently-next-time"&gt;
&lt;h3&gt;What should we do differently next time?&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="what-still-puzzles-us-or-what-do-we-need-to-learn-more-about"&gt;
&lt;h3&gt;What still puzzles us, or what do we need to learn more about?&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://al1s.github.io/ru/posts/plan-and-done-for-sep-19-2018/</guid><pubDate>Wed, 19 Sep 2018 13:10:14 GMT</pubDate></item></channel></rss>